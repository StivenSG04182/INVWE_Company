generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([agencyId])
}

model Permissions {
  id           String     @id @default(uuid())
  email        String
  subAccountId String
  access       Boolean
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                       @id @default(uuid())
  connectAccountId String?                      @default("")
  customerId       String                       @default("")
  name             String
  agencyLogo       String
  companyEmail     String
  companyPhone     String
  whiteLabel       Boolean                      @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                          @default(5)
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  users            User[]
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
  Media            Media[]
  paymentGateways  PaymentGatewayConnection[]
  settings         AgencySettings[]
  webhookEvents    PaymentGatewayWebhookEvent[]
  Reports          Report[]
  Products         Product[]
  Providers        Provider[]
  Areas            Area[]
  Stocks           Stock[]
  Movements        Movement[]
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]
  Reports          Report[]
  Products         Product[]
  Providers        Provider[]
  Areas            Area[]
  Stocks           Stock[]
  Movements        Movement[]

  @@index([agencyId])
}

model Tag {
  id           String     @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pipelineId String
  order      Int      @default(0)
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  Tickets    Ticket[]

  @@index([pipelineId])
}

model Ticket {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  laneId         String
  order          Int      @default(0)
  value          Decimal?
  description    String?
  customerId     String?
  assignedUserId String?
  Lane           Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  Tags           Tag[]
  Customer       Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  Assigned       User?    @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  subAccountId       String
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  active       Boolean    @default(false)
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  laneId       String     @default("0")
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Contact {
  id           String     @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  agencyId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([agencyId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?
  subAccountId  String
  liveProducts  String?      @default("[]")
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  ClassName     ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  previewImage String?
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  subAccountId String?
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model Notification {
  id           String      @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  agencyId             String?  @unique
  Agency               Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model PaymentGatewayConnection {
  id           String    @id @default(cuid())
  gatewayId    String
  agencyId     String
  status       String
  accountId    String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  agency       Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, gatewayId])
  @@index([agencyId])
}

model AgencySettings {
  id                        String   @id @default(cuid())
  agencyId                  String   @unique
  notificationsEnabled      Boolean  @default(true)
  emailNotificationsEnabled Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  agency                    Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model PaymentGatewayWebhookEvent {
  id        String   @id @default(cuid())
  gatewayId String
  agencyId  String
  eventType String
  eventData Json
  createdAt DateTime @default(now())
  agency    Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([gatewayId])
}

model Report {
  id           String       @id @default(uuid())
  name         String
  description  String?
  type         ReportType
  format       ReportFormat
  content      Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
}

model TagToTicket {
  A String
  B String

  @@id([A, B], map: "_TagToTicket_AB_pkey")
  @@index([B], map: "_TagToTicket_B_index")
  @@map("_TagToTicket")
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
  store
}

enum TriggerTypes {
  CONTACT_FORM
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OrONxLxRSJcuTyW6jaiXv5r
  price_1OrONxLxRSJcuTyWd1e0kYGA
}

enum ReportType {
  INVENTORY
  SALES
  FINANCIAL
  CUSTOMER
  PRODUCT
  PERFORMANCE
  CUSTOM
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  WORD
  POWERPOINT
}

model Product {
  id           String     @id @default(uuid())
  name         String
  sku          String
  description  String?
  price        Decimal    @default(0)
  cost         Decimal?   @default(0)
  minStock     Int?
  images       String[]   @default([])
  categoryId   String?
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Stocks       Stock[]
  Movements    Movement[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Provider {
  id           String     @id @default(uuid())
  name         String
  contactName  String?
  email        String?
  phone        String?
  address      String?
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Movements    Movement[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Area {
  id           String     @id @default(uuid())
  name         String
  description  String?
  layout       Json?      @default("{\"items\":[]}")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Stocks       Stock[]
  Movements    Movement[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Stock {
  id           String     @id @default(uuid())
  quantity     Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  productId    String
  areaId       String
  agencyId     String
  subAccountId String?
  Product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  Area         Area       @relation(fields: [areaId], references: [id], onDelete: Cascade)
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@unique([productId, areaId])
  @@index([productId])
  @@index([areaId])
  @@index([agencyId])
  @@index([subAccountId])
}

model Movement {
  id           String       @id @default(uuid())
  type         MovementType
  quantity     Int
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  productId    String
  areaId       String
  providerId   String?
  agencyId     String
  subAccountId String?
  Product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  Area         Area         @relation(fields: [areaId], references: [id], onDelete: Cascade)
  Provider     Provider?    @relation(fields: [providerId], references: [id], onDelete: SetNull)
  Agency       Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?  @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([areaId])
  @@index([providerId])
  @@index([agencyId])
  @@index([subAccountId])
}

enum MovementType {
  ENTRADA
  SALIDA
  TRANSFERENCIA
}
