generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                     String         @id @default(uuid())
  name                   String
  avatarUrl              String
  email                  String         @unique
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  role                   Role           @default(SUBACCOUNT_USER)
  agencyId               String?
  birthDate              DateTime?      
  gender                 String?
  maritalStatus          String?
  address                String?
  phone                  String?
  position               String?
  hireDate               DateTime?
  salary                 String?
  workSchedule           String?
  socialSecurityNumber   String?
  socialSecurityAffiliation String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]
  Opportunity  Opportunity[]
  Case         Case[]
  PQR          PQR[]
  Sale         Sale[]
  CashRegister CashRegister[]
  Schedule     Schedule[]
  @@index([agencyId])
}

model Permissions {
  id                 String              @id @default(uuid())
  email              String
  subAccountId       String
  access             Boolean
  User               User                @relation(fields: [email], references: [email], onDelete: Cascade)
  SubAccount         SubAccount          @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  SidebarPermissions SidebarPermission[]

  @@index([subAccountId])
  @@index([email])
}

model SidebarPermission {
  id              String      @id @default(uuid())
  permissionId    String
  sidebarOptionId String
  access          Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Permission      Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([permissionId, sidebarOptionId])
  @@index([permissionId])
}

model Agency {
  id                String                       @id @default(uuid())
  connectAccountId  String?                      @default("")
  customerId        String                       @default("")
  name              String
  agencyLogo        String
  companyEmail      String
  companyPhone      String
  whiteLabel        Boolean                      @default(true)
  address           String
  city              String
  zipCode           String
  state             String
  country           String
  goal              Int                          @default(5)
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  users             User[]
  SubAccount        SubAccount[]
  SidebarOption     AgencySidebarOption[]
  Invitation        Invitation[]
  Notification      Notification[]
  Subscription      Subscription?
  AddOns            AddOns[]
  Media             Media[]
  paymentGateways   PaymentGatewayConnection[]
  settings          AgencySettings[]
  webhookEvents     PaymentGatewayWebhookEvent[]
  Reports           Report[]
  Products          Product[]
  Providers         Provider[]
  Areas             Area[]
  Movements         Movement[]
  Invoices          Invoice[]
  Payments          Payment[]
  Taxes             Tax[]
  ProductCategories  ProductCategory[]
  Clients           Client[]
  Opportunities     Opportunity[]
  Cases             Case[]
  PQRs              PQR[]
  Funnels           Funnel[]
  DianConfig        DianConfig?
  Sale              Sale[]
  CashRegister      CashRegister[]
  Schedule          Schedule[]
  Holiday           Holiday[]
}

model SubAccount {
  id                String                    @id @default(uuid())
  connectAccountId  String?                   @default("")
  name              String
  subAccountLogo    String
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  companyEmail      String
  companyPhone      String
  goal              Int                       @default(5)
  address           String
  city              String
  zipCode           String
  state             String
  country           String
  agencyId          String
  Agency            Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption     SubAccountSidebarOption[]
  Permissions       Permissions[]
  Media             Media[]
  Contact           Contact[]
  Trigger           Trigger[]
  Automation        Automation[]
  Pipeline          Pipeline[]
  Tags              Tag[]
  Notification      Notification[]
  Reports           Report[]
  Products          Product[]
  Providers         Provider[]
  Areas             Area[]
  Movements         Movement[]
  Invoices          Invoice[]
  Payments          Payment[]
  Taxes             Tax[]
  ProductCategories ProductCategory[]
  Clients           Client[]
  Opportunities     Opportunity[]
  Cases             Case[]
  PQRs              PQR[]
  Sale              Sale[]
  CashRegister      CashRegister[]

  @@index([agencyId])
}

model Tag {
  id           String     @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pipelineId String
  order      Int      @default(0)
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  Tickets    Ticket[]

  @@index([pipelineId])
}

model Ticket {
  id             String   @id @default(uuid())
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  laneId         String
  order          Int      @default(0)
  value          Decimal?
  description    String?
  customerId     String?
  assignedUserId String?
  Lane           Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  Tags           Tag[]
  Customer       Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  Assigned       User?    @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  subAccountId       String
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  active       Boolean    @default(false)
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  laneId       String     @default("0")
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Contact {
  id           String     @id @default(uuid())
  name         String
  email        String
  phone        String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]
  Invoices     Invoice[]
  Sale         Sale[]

  @@index([subAccountId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  agencyId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Agency       Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([agencyId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?
  agencyId      String?
  liveProducts  String?      @default("[]")
  Agency        Agency?      @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  FunnelPages   FunnelPage[]
  ClassName     ClassName[]

  @@index([agencyId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  previewImage String?
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  subAccountId String?
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Invitation {
  id        String           @id @default(uuid())
  email     String           @unique
  agencyId  String
  status    InvitationStatus @default(PENDING)
  role      Role             @default(SUBACCOUNT_USER)
  createdAt DateTime         @default(now())
  Agency    Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model Notification {
  id           String      @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  agencyId             String?  @unique
  Agency               Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model PaymentGatewayConnection {
  id           String    @id @default(cuid())
  gatewayId    String
  agencyId     String
  status       String
  accountId    String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  agency       Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, gatewayId])
  @@index([agencyId])
}

model AgencySettings {
  id                        String   @id @default(cuid())
  agencyId                  String   @unique
  notificationsEnabled      Boolean  @default(true)
  emailNotificationsEnabled Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  agency                    Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model PaymentGatewayWebhookEvent {
  id        String   @id @default(cuid())
  gatewayId String
  agencyId  String
  eventType String
  eventData Json
  createdAt DateTime @default(now())
  agency    Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([gatewayId])
}

model Report {
  id           String       @id @default(uuid())
  name         String
  description  String?
  type         ReportType
  format       ReportFormat
  content      Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([agencyId])
  @@index([subAccountId])
}

model TagToTicket {
  A String
  B String

  @@id([A, B], map: "_TagToTicket_AB_pkey")
  @@index([B], map: "_TagToTicket_B_index")
  @@map("_TagToTicket")
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  shoppingCart
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
  store
  layoutDashboard
  chartLine
  helpCircle
}

enum TriggerTypes {
  CONTACT_FORM
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OrONxLxRSJcuTyW6jaiXv5r
  price_1OrONxLxRSJcuTyWd1e0kYGA
}

enum ReportType {
  INVENTORY
  SALES
  FINANCIAL
  CUSTOMER
  PRODUCT
  PERFORMANCE
  CUSTOM
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  WORD
  POWERPOINT
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  LEAD
}

enum OpportunityStatus {
  NEW
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PQRType {
  PETITION
  COMPLAINT
  CLAIM
}

enum PQRStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SavedSale {
  id           String    @id @default(uuid())
  agencyId     String
  subAccountId String?
  areaId       String
  products     String    // JSON string de productos
  client       String?   // JSON string del cliente
  total        Decimal   @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([areaId])
}


model Schedule {
  id          String    @id @default(uuid())
  userId      String
  agencyId    String
  startTime   String
  endTime     String
  days        String    // Almacenado como JSON string ["Lunes", "Martes", ...]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agency      Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([agencyId])
}

model Holiday {
  id          String    @id @default(uuid())
  date        DateTime
  name        String
  description String?
  agencyId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  agency      Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model ProductCategory {
  id           String      @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Products     Product[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Client {
  id            String        @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  notes         String?
  type          ClientType    @default(INDIVIDUAL)
  status        ClientStatus  @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  agencyId      String
  subAccountId  String?
  Agency        Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Opportunities Opportunity[]
  Cases         Case[]
  PQRs          PQR[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Opportunity {
  id             String            @id @default(uuid())
  title          String
  description    String?
  value          Decimal           @default(0)
  status         OpportunityStatus @default(NEW)
  priority       Priority          @default(MEDIUM)
  dueDate        DateTime?
  clientId       String
  assignedUserId String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  agencyId       String
  subAccountId   String?
  Client         Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  AssignedUser   User?             @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  Agency         Agency            @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount     SubAccount?       @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([assignedUserId])
  @@index([agencyId])
  @@index([subAccountId])
}

model Case {
  id             String      @id @default(uuid())
  title          String
  description    String?
  status         CaseStatus  @default(OPEN)
  priority       Priority    @default(MEDIUM)
  dueDate        DateTime?
  clientId       String
  assignedUserId String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  agencyId       String
  subAccountId   String?
  Client         Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  AssignedUser   User?       @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  Agency         Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount     SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([assignedUserId])
  @@index([agencyId])
  @@index([subAccountId])
}

model PQR {
  id             String      @id @default(uuid())
  title          String
  description    String
  type           PQRType     @default(PETITION)
  status         PQRStatus   @default(PENDING)
  priority       Priority    @default(MEDIUM)
  dueDate        DateTime?
  clientId       String
  assignedUserId String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  agencyId       String
  subAccountId   String?
  Client         Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  AssignedUser   User?       @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  Agency         Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount     SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([assignedUserId])
  @@index([agencyId])
  @@index([subAccountId])
}

model Product {
  id             String           @id @default(uuid())
  name           String
  sku            String
  description    String?
  price          Decimal          @default(0)
  cost           Decimal?         @default(0)
  minStock       Int?
  images         String[]         @default([])
  categoryId     String?
  active         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  agencyId       String
  subAccountId   String?
  brand          String?
  model          String?
  tags           String[]         @default([])
  unit           String?
  barcode        String?
  isActive       Boolean?         @default(true)
  quantity       Int?             @default(0)
  locationId     String?
  warehouseId    String?
  batchNumber    String?
  expirationDate DateTime?
  serialNumber   String?
  warrantyMonths Int?
  isReturnable   Boolean          @default(false)
  discount       Decimal?         @default(0)
  discountStartDate DateTime?
  discountEndDate   DateTime?
  discountMinimumPrice Decimal?
  taxRate        Decimal?         @default(0)
  supplierId     String?
  variants       Json?
  documents      String[]         @default([])
  customFields   Json?
  externalIntegrations Json?

  Agency         Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount     SubAccount?      @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Category       ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  Movements      Movement[]       @relation("ProductInventory")
  InvoiceItems   InvoiceItem[]
  SaleItems      SaleItem[]

  @@index([categoryId])
  @@index([agencyId],     map: "Product_agencyId_idx1")
  @@index([subAccountId], map: "Product_subAccountId_idx1")
}

model Provider {
  id           String      @id @default(uuid())
  name         String
  contactName  String?
  email        String?
  phone        String?
  address      String?
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Movements    Movement[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Area {
  id            String         @id @default(uuid())
  name          String
  description   String?
  layout        Json?          @default("{\"items\":[]}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  agencyId      String
  subAccountId  String?
  Agency        Agency         @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount?    @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Movements     Movement[]
  Sales         Sale[]
  CashRegisters CashRegister[]

  @@index([agencyId])
  @@index([subAccountId])
}

model Movement {
  id           String        @id @default(uuid())
  type         MovementType? // null = stock, otro = movimiento
  quantity     Int
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  productId    String
  areaId       String
  providerId   String?
  agencyId     String
  subAccountId String?

  Product      Product       @relation("ProductInventory", fields: [productId], references: [id], onDelete: Cascade)
  Area         Area          @relation(fields: [areaId], references: [id], onDelete: Cascade)
  Provider     Provider?     @relation(fields: [providerId], references: [id], onDelete: SetNull)
  Agency       Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([areaId])
  @@index([providerId])
  @@index([agencyId])
  @@index([subAccountId])
}

enum MovementType {
  ENTRADA
  SALIDA
  TRANSFERENCIA
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  subtotal      Decimal       @default(0)
  tax           Decimal       @default(0)
  discount      Decimal       @default(0)
  total         Decimal       @default(0)
  notes         String?
  dueDate       DateTime?
  issuedDate    DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customerId    String?
  agencyId      String
  subAccountId  String?
  Agency        Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Customer      Contact?      @relation(fields: [customerId], references: [id], onDelete: SetNull)
  Items         InvoiceItem[]
  Payments      Payment[]
  Taxes         InvoiceTax[]
  Sale          Sale[]

  @@index([agencyId])
  @@index([subAccountId])
  @@index([customerId])
}

model InvoiceItem {
  id          String   @id @default(uuid())
  quantity    Int
  unitPrice   Decimal
  discount    Decimal  @default(0)
  tax         Decimal  @default(0)
  total       Decimal
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  productId   String
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([productId])
}

model Payment {
  id           String        @id @default(uuid())
  amount       Decimal
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  reference    String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceId    String
  agencyId     String
  subAccountId String?
  Invoice      Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Agency       Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: SetNull)

  @@index([invoiceId])
  @@index([agencyId])
  @@index([subAccountId])
}

model Tax {
  id           String       @id @default(uuid())
  name         String
  rate         Decimal
  description  String?
  isDefault    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  agencyId     String
  subAccountId String?
  Agency       Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?  @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  InvoiceTaxes InvoiceTax[]

  @@index([agencyId])
  @@index([subAccountId])
}

model InvoiceTax {
  id        String   @id @default(uuid())
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoiceId String
  taxId     String
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Tax       Tax      @relation(fields: [taxId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([taxId])
}

model DianConfig {
  id               String          @id @default(uuid())
  resolutionNumber String
  resolutionDate   DateTime
  prefix           String?
  startNumber      Int
  endNumber        Int
  currentNumber    Int
  expirationDate   DateTime
  environment      DianEnvironment @default(TESTING)
  technicalKey     String?
  softwareId       String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  agencyId         String          @unique
  Agency           Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

enum SaleStatus {
  DRAFT
  COMPLETED
  CANCELLED
  SENT
}

model Sale {
  id            String        @id @default(uuid())
  saleNumber    String        @unique
  subtotal      Decimal       @default(0)
  tax           Decimal       @default(0)
  discount      Decimal       @default(0)
  total         Decimal       @default(0)
  paymentMethod PaymentMethod
  status        SaleStatus    @default(COMPLETED)
  notes         String?
  saleDate      DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customerId    String?
  cashierId     String?
  areaId        String
  agencyId      String
  subAccountId  String?
  invoiceId     String?
  Agency        Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount?   @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Customer      Contact?      @relation(fields: [customerId], references: [id], onDelete: SetNull)
  Cashier       User?         @relation(fields: [cashierId], references: [id], onDelete: SetNull)
  Area          Area          @relation(fields: [areaId], references: [id], onDelete: Restrict)
  Invoice       Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  Items         SaleItem[]

  @@index([agencyId])
  @@index([subAccountId])
  @@index([customerId])
  @@index([cashierId])
  @@index([areaId])
  @@index([invoiceId])
}

model SaleItem {
  id          String   @id @default(uuid())
  quantity    Int
  unitPrice   Decimal
  discount    Decimal  @default(0)
  tax         Decimal  @default(0)
  subtotal    Decimal
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  saleId      String
  productId   String
  Sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([saleId])
  @@index([productId])
}

enum RegisterStatus {
  OPEN
  CLOSED
}

model CashRegister {
  id           String         @id @default(uuid())
  openAmount   Decimal        @default(0)
  closeAmount  Decimal?
  cashSales    Decimal        @default(0)
  cardSales    Decimal        @default(0)
  otherSales   Decimal        @default(0)
  totalSales   Decimal        @default(0)
  difference   Decimal        @default(0)
  notes        String?
  status       RegisterStatus @default(OPEN)
  openDate     DateTime       @default(now())
  closeDate    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cashierId    String
  areaId       String
  agencyId     String
  subAccountId String?
  Agency       Agency         @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount?    @relation(fields: [subAccountId], references: [id], onDelete: SetNull)
  Cashier      User           @relation(fields: [cashierId], references: [id], onDelete: Restrict)
  Area         Area           @relation(fields: [areaId], references: [id], onDelete: Restrict)

  @@index([agencyId])
  @@index([subAccountId])
  @@index([cashierId])
  @@index([areaId])
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CHECK
  ONLINE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DianEnvironment {
  TESTING
  PRODUCTION
}
